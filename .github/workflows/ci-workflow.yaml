name: Gazette Continuous Integration

# TODO: maybe change to pull_request once things are working?
on:
  push: {}
  release:
    # only run when a release is created. Without this additional restriction, GH actions will
    # trigger multiple runs for a single release, because it fires off separate events creating vs
    # publishing the release.
    types: [created]

env:
  # TODO: see which of these env vars we still need on GH Actions
  # RocksDB version to build. Keep in sync with mk/config.mk
  # Also be sure to update the save_cache step below.
  ROCKSDB_VERSION: 6.7.3
  GOPATH: ${{ github.workspace }}/.build/go-path/


jobs:
  debug:
    name: 'Print Event Info'
    runs-on: ubuntu-18.04
    steps:
      - name: 'Print event info'
        run: |
          echo event_name=${{ github.event_name }};
          echo "ref=${{ github.ref }}" 
          echo "Event Json: " 
          echo '${{ toJson(github.event) }}'
          
  build:
    runs-on: ubuntu-18.04
    container:
      image: gazette/ci-builder:20200421
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Release Info'
        id: release_info
        run: |
          is_release=${{ github.event_name == 'release' }}
          if [[ "$is_release" == "true" ]]; then
            tag_name=${{ github.event.release.tag_name }}
            # the version regex doesn't need to be super sophisticated, since the goal is not to
            # validate that this is a semantic version number. Rather the goal is just to see if 
            # matches the typical pattern we use for release tags (e.g. v0.86.1). If it does, then
            # we'll remove the 'v' prefix and use the remainder as the docker tag
            # If a release tag does not match that format, then we'll just use the tag value as is
            if echo "$tag_name" | grep -qE '^v[0-9]+\.[0-9]+\.[0-9]+'; then
              version="${tag_name#v}"
            else
              version="${tag_name}"
            fi
          else
            # this is not a release, so we'll just use the git sha for the version number
            version=${{ github.sha }}
          fi
          echo ::set-output name=VERSION::${version}
          echo ::set-output name=IS_RELEASE::${is_release}

      - name: 'Print Debug Info'
        run: |
          echo release_tag=${{ toJson(steps.determine_version.outputs) }}
          echo "GOPATH env var =$GOPATH"
          echo "GOPATH expr = ${{ env.GOPATH }}"

        # The 'c<n>' in these Cache steps is just for changing the cache key so that
        # we can manually invalidate the cache if we need
      - name: 'RocksDB Cache'
        uses: actions/cache@v2
        with:
          # TODO: figure out a cache key that will be invalidated if we change any options used to
          # compile rocksdb
          key: rocksdb-c1-${{ env.ROCKSDB_VERSION }}
          path: ".build/rocksdb-v${{ env.ROCKSDB_VERSION }}"

      - name: 'Go Module Cache'
        uses: actions/cache@v2
        with:
          key: go-mod-c1-${{ hashFiles('go.sum') }}
          path: "${{ env.GOPATH }}/pkg"
          # If we don't have a cached directory that matches the hash exactly,
          # then this will allow a non-matching directory to be pulled in. This is safe
          # because go will use its own finer-grained cache invalidation logic
          restore-keys: "go-mod-c1-"

      - name: 'Install'
        run: "make go-install VERSION=${{ steps.release_info.outputs.VERSION }}"

      - name: 'Test'
        # TODO: change target to 'go-test-ci' before this is merged
        run: "make go-test-fast VERSION=${{ steps.release_info.outputs.VERSION }}"

      - name: 'Upload gazette Binary'
        uses: actions/upload-artifact@v2
        with:
          name: 'gazette-binaries'
          path: "${{ env.GOPATH }}/bin/gazette"

      - name: 'Upload gazctl Binary'
        uses: actions/upload-artifact@v2
        with:
          name: 'gazette-binaries'
          path: "${{ env.GOPATH }}/bin/gazctl"

      - name: 'Build Gazette Broker Docker Image'
        run: "make ci-release-gazette-broker"

      - name: 'Build Gazette Examples Docker Image'
        run: "make ci-release-gazette-examples"

      - name: 'Push Docker Images'
        if: steps.release_info.outputs.IS_RELEASE == 'true'
        run: |
          docker login -u '${{ secrets.DOCKER_USERNAME }}' -p '${{ secrets.DOCKER_PASSWORD }}' ${{ secrets.DOCKER_REGISTRY }}
          make push-to-registry registry=${{ secrets.DOCKER_REGISTRY }} release_tag=${{ steps.release_info.outputs.VERSION }}

