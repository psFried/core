name: Gazette Continuous Integration

# TODO: change to pull_request once things are working
on:
  push: {}
  release:
    types: [created]

env:
  # TODO: see which of these env vars we still need on GH Actions
  # RocksDB version to build. Keep in sync with mk/config.mk
  # Also be sure to update the save_cache step below.
  ROCKSDB_VERSION: 6.7.3
  GOPATH: ${{ github.workspace }}/.build/go-path/


jobs:
  debug:
    runs-on: ubuntu-18.04
    container:
      image: gazette/ci-builder:20200421
    steps:
      - name: 'Print event info'
        run: |
          echo event_name=${{ github.event_name }};
          echo "Event Json: " 
          echo '${{ toJson(github.event) }}'
          echo "ENV: NPROC=$NPROC"
          echo "nproc=$(nproc)"
          
  build:
    runs-on: ubuntu-18.04
    container:
      image: gazette/ci-builder:20200421
    needs: debug
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

        # The 'c<n>' in these Cache steps is just for changing the cache key so that
        # we can manually invalidate the cache if we need
      - name: 'RocksDB Cache'
        uses: actions/cache@v2
        with:
          key: rocksdb-c1-${{ env.ROCKSDB_VERSION }}
          path: ".build/rocksdb-v${{ env.ROCKSDB_VERSION }}"

      - name: 'Go Module Cache'
        uses: actions/cache@v2
        with:
          key: go-mod-c1-${{ hashFiles('go.sum') }}
          path: "${{ env.GOPATH }}/pkg"
          # If we don't have a cached directory that matches the hash exactly,
          # then this will allow a non-matching directory to be pulled in. This is safe
          # because go will use its own finer-grained cache invalidation logic
          restore-keys: "go-mod-c1-"

      - name: 'Install'
        run: "make go-install"

      - name: 'Test'
        run: "make go-test-ci"

  release:
    runs-on: ubuntu-18.04
    container:
      image: gazette/ci-builder:20200421
    needs: [debug, build]
    #if: ${{ github.event_name }} == 'release'

    steps:
      - name: 'Placeholder'
        run: |
          echo -e "*************** \n\n RUNNING RELEASE \n\n *********************"
          ls -al ${{ env.GPPATH }}/bin
          ls -al ${{ env.GPPATH }}/pkg

