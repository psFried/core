name: Gazette Continuous Integration

# TODO: change to pull_request once things are working
on:
  push: {}
  release:
    types: [created]

env:
  # TODO: see which of these env vars we still need on GH Actions
  # RocksDB version to build. Keep in sync with mk/config.mk
  # Also be sure to update the save_cache step below.
  ROCKSDB_VERSION: 6.7.3
  GOPATH: ${{ github.workspace }}/.build/go-path/


jobs:
  debug:
    runs-on: ubuntu-18.04
    container:
      image: gazette/ci-builder:20200421
    steps:
      - name: 'Print event info'
        run: |
          echo event_name=${{ github.event_name }};
          echo "ref=${{ github.ref }}" 
          echo "Event Json: " 
          echo '${{ toJson(github.event) }}'
          
  build:
    runs-on: ubuntu-18.04
    container:
      image: gazette/ci-builder:20200421
    needs: debug
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

        # this is needed because github actions only provide the fully-qualified name of the ref,
        # which includes the 'refs/heads/' or 'refs/tags/' prefix. For release tags, we'll expect
        # that the tag is a three part semantic version number, prefixed with a 'v'. We only want 
        # the part that comes after the 'refs/tags/v', so this step will strip off those prefixes 
        # and set and output called 'VERSION', which later steps can reference using the syntax: 
        # '${{ steps.determine_version.outputs.VERSION }}'
        # e.g. 'refs/tags/v0.87.3' becomes '0.87.3'
        # For any refs (tags or branches) that do not match that format, we just strip off the 
        # 'refs/[heads|tags]/' prefix and call it good.
        # e.g. 'refs/heads/foo' becomes 'foo' and 'refs/tags/bar' becomes 'bar'
        # This approach was taken from: https://github.community/t/how-to-get-just-the-tag-name/16241/9
      - name: 'Release Info'
        id: release_info
        run: |
          ref_id=${{ github.ref }}
          # the version regex doesn't need to be super sophisticated, since the goal is not to
          # validate that this is a semantic version number. Rather the goal is just to see if 
          # matches the typical pattern we use for release tags (e.g. v0.86.1). There are
          version_regex='^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+'
          if echo "$ref_id" | grep -qE "$version_regex"; then
            version="${ref_id#refs/tags/v}"
          else
            version="${ref_id#refs/*/}"
          fi
          echo ::set-output name=VERSION::${version}
          echo ::set-output name=IS_RELEASE::${{ github.event_name == 'release' }}

      - name: 'Print Debug Info'
        run: |
          echo release_tag=${{ toJson(steps.determine_version.outputs) }}
          echo "GOPATH env var =$GOPATH"
          echo "GOPATH expr = ${{ env.GOPATH }}"

        # The 'c<n>' in these Cache steps is just for changing the cache key so that
        # we can manually invalidate the cache if we need
      - name: 'RocksDB Cache'
        uses: actions/cache@v2
        with:
          # TODO: figure out a cache key that will be invalidated if we change any options used to
          # compile rocksdb
          key: rocksdb-c1-${{ env.ROCKSDB_VERSION }}
          path: ".build/rocksdb-v${{ env.ROCKSDB_VERSION }}"

      - name: 'Go Module Cache'
        uses: actions/cache@v2
        with:
          key: go-mod-c1-${{ hashFiles('go.sum') }}
          path: "${{ env.GOPATH }}/pkg"
          # If we don't have a cached directory that matches the hash exactly,
          # then this will allow a non-matching directory to be pulled in. This is safe
          # because go will use its own finer-grained cache invalidation logic
          restore-keys: "go-mod-c1-"

      - name: 'Install'
        run: "make go-install"

      - name: 'Test'
        # TODO: change target to 'go-test-ci' before this is merged
        run: "make go-test-fast"

      - name: 'Upload gazette Binary'
        uses: actions/upload-artifact@v2
        with:
          name: 'gazette-binaries'
          path: "${{ env.GOPATH }}/bin/gazette"

      - name: 'Upload gazctl Binary'
        uses: actions/upload-artifact@v2
        with:
          name: 'gazette-binaries'
          path: "${{ env.GOPATH }}/bin/gazctl"

      - name: 'Build Gazette Docker Image'
        run: "make ci-release-gazette-broker"

      - name: 'Build Gazette Examples Docker Image'
        run: "make ci-release-gazette-examples"

      - name: 'Docker login'
        if: ${{ steps.release_info.outputs.IS_RELEASE }}
        run: |
          docker login -u '${{ secrets.DOCKER_USERNAME }}' -p '${{ secrets.DOCKER_PASSWORD }}' ${{ secrets.DOCKER_REGISTRY }}

      - name: 'Push Docker Images'
        if: ${{ steps.release_info.outputs.IS_RELEASE }}
        run: |
          make push-to-registry registry=${{ secrets.DOCKER_REGISTRY }} release_tag=${{ steps.release_info.outputs.VERSION }}


  release:
    runs-on: ubuntu-18.04
    container:
      image: gazette/ci-builder:20200421
    needs: [debug, build]
    #if: ${{ github.event_name }} == 'release'

    steps:
      - name: 'Download Gazette Artifact'
        uses: actions/download-artifact@v2
        with:
          name: 'gazette-binaries'

      - name: 'Placeholder'
        run: |
          echo -e "*************** \n\n RUNNING RELEASE \n\n *********************"
          echo "GOPATH env var =$GOPATH"
          echo "GOPATH expr = ${{ env.GOPATH }}"
          ls -al $GOPATH || echo "no GOPATH dir found"
          echo "ls of bin"
          ls -al ${{ env.GPPATH }}/bin || echo "no bin/ dir found"
          echo "ls of pkg/"
          ls -al ${{ env.GPPATH }}/pkg || echo "no pkg/ dir found"
          echo "ls of ."
          ls -al
          echo "ls of gazette-binaries"
          ls -al gazette-binaries/ || echo "no gazette-binaries dir found"

